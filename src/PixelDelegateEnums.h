#pragma once

#include <string>

enum HoverType {
    NO_HOVER,
    HOVER_SQUARE,
    HOVER_TOP,
    HOVER_LEFT,
    HOVER_RIGHT,
    HOVER_BOTTOM,
    HOVER_BR,
    HOVER_TR,
    HOVER_BL,
    HOVER_TL
};

enum PixelDelegateData {
    DRAW_BG1 = 32,
    DRAW_BG2 = 31,
    DRAW_BG3 = 30,

    PIXEL_ARRAY_BG2 = 101,
    PALETTE_ARRAY_BG2 = 102,
    TILEATTR_BG2 = 103,
    FLIP_H_BG2 = 104,
    FLIP_V_BG2 = 105,

    COLLISION_DRAW = 106,
    SHOW_COLLISION = 107,
    DEBUG_DATA = 108,

    PIXEL_ARRAY_BG1 = 109,
    PALETTE_ARRAY_BG1 = 110,
    TILEATTR_BG1 = 111,
    FLIP_H_BG1 = 112,
    FLIP_V_BG1 = 113,

    /**
     * Type: int
     * Purpose: Object ID to print out
     */
    OBJECT_ID = 114,
    OBJECT_PALETTE = 115,
    OBJECT_TILES = 116,
    OBJECT_UUID = 117,

    // BG3 support
    PIXEL_ARRAY_BG3 = 118,
    PALETTE_ARRAY_BG3 = 119,
    TILEATTR_BG3 = 120,
    FLIP_H_BG3 = 121,
    FLIP_V_BG3 = 122,

    DRAW_OBJECTS = 123,

    LAYER_DRAW_ORDER = 124,

    DRAW_TRIGGERS = 125,

    DRAW_TRANS_TILES = 126,
    TILE_ID_BG1 = 127,
    TILE_ID_BG2 = 128,
    TILE_ID_BG3 = 129,

    COLLISION_DEBUG = 130,
    HOVER_TYPE = 131,

    PALETTE_ID_BG1 = 132,
    PALETTE_ID_BG2 = 133,
    PALETTE_ID_BG3 = 134,

    TILE_SELECTED_BG1 = 135,
    TILE_SELECTED_BG2 = 136,
    TILE_SELECTED_BG3 = 137,
    SPRITE_SELECTED = 138,

    EXIT_TYPE = 139, // int/enum
    EXIT_INDEX = 140, // uint
    ENTRANCE_TYPE = 141, // int/enum
    ENTRANCE_INDEX = 142, // uint
    DRAW_EXITS = 143, // bool
    DRAW_ENTRANCES = 144, // bool

    OBJECT_TILES_FLIPV = 145, // bool
    OBJECT_TILES_FLIPH = 146,  // bool
    OBJECT_TILES_BUILDFRAME_INDEX = 147
};

enum CollisionType {
    NONE = 0x0,
    SQUARE = 0x1,
    PLATFORM_PASSABLE = 0x2, // You can jump from below it and land on it, no head hit
    UP_RIGHT_30 = 0x3,
    UP_RIGHT_30_HALFSTART = 0x4,
    UP_RIGHT_STEEP_1 = 0x5,
    UP_RIGHT_STEEP_2 = 0x6,
    UP_RIGHT_45 = 0x7,
    KILL_SPIKES = 0x8,
    LAVA_KILL = 0x9,
    ICY_SQUARE = 0xb, // Discovered on 4-6, if you're looking to test
    WATER_STILL = 0x12, // Discovered on 3-2 #1, if you're looking to test
    STATIC_COIN = 0x1a,
    SOFT_ROCK = 0x1b,
    CLIMBABLE_VINE_CEILING = 0x1c,
    CLIMBABLE_VINE_TALL = 0x1d,
    STAIRS_UP_RIGHT = 0x1f, // 1-4 #1 top right example
    DOWN_RIGHT_30_2 = 0x43,
    DOWN_RIGHT_30_1 = 0x44,
    DOWN_RIGHT_STEEP_HALFSTART = 0x45,
    DOWN_RIGHT_STEEP = 0x46,
    DOWN_RIGHT_45 = 0x47,
    STAIRS_DOWN_RIGHT = 0x5f,
    UPSIDE_DOWN_SLOPE_30_1 = 0x83,
    UPSIDE_DOWN_SLOPE_30_2 = 0x84,
    UPSIDE_DOWN_SHARP_DOWN_2 = 0x85,
    UPSIDE_DOWN_SHARP_DOWN_1 = 0x86,
    UPSIDE_DOWN_DOWNWARDS_45 = 0x87,
    UPSIDE_DOWN_UP_30 = 0xc4,
    UPSIDE_DOWN_UP_30_2 = 0xc3,
    UPSIDE_DOWN_SHARP_UP_2 = 0xc5,
    UPSIDE_DOWN_SHARP_UP_1 = 0xc6,
    UPSIDE_DOWN_UP_RIGHT = 0xc7
};

enum CollisionDraw {
    CLEAR,
    CORNER_TOP_RIGHT,
    CORNER_TOP_LEFT,
    CORNER_BOTTOM_LEFT,
    CORNER_BOTTOM_RIGHT,
    SQUARE_DRAW,
    ZIG_ZAG,
    ZIG_ZAG_UPSIDE_DOWN_RED,
    DIAG_DOWN_RIGHT,
    DIAG_UP_RIGHT,
    COIN_TOP_LEFT,
    COIN_TOP_RIGHT,
    COIN_BOTTOM_LEFT,
    COIN_BOTTOM_RIGHT,
    UP_RIGHT_30_BL,
    UP_RIGHT_30_BR,
    UP_RIGHT_30_HALFSTART_UL,
    UP_RIGHT_30_HALFSTART_UR,

    DOWN_RIGHT_30_TALL,
    DOWN_RIGHT_30_SHORT,
    UPSIDE_DOWN_RIGHT_45,
    UPSIDE_DOWN_RIGHT_UP_30_TALL,
    UPSIDE_DOWN_RIGHT_UP_30_SHORT,

    UP_RIGHT_STEEP_TALL,
    UP_RIGHT_STEEP_SHORT,

    UPSIDE_DOWN_DOWNWARDS_45_DRAW,

    DOWN_RIGHT_STEEP_THIN,
    DOWN_RIGHT_STEEP_WIDE,
    SQERR,

    SOFT_ROCK_SQUARE,
    SLIPPERY_ICE_SQUARE,
    SLIPPERY_ICE_SQUARE_LIGHTER,

    UPSIDE_DOWN_SLOPE_30_1_DRAW,
    UPSIDE_DOWN_SLOPE_30_2_DRAW,
    VINE_LEFT,
    VINE_RIGHT,

    STAIRS_DOWN_RIGHT_DRAW,
    STAIRS_UP_RIGHT_DRAW,
    WATER_STILL_DRAW,
    LAVA_KILL_DRAW,

    UPSIDE_DOWN_SHARP_UP_SHORT_DRAW,
    UPSIDE_DOWN_SHARP_UP_TALL_DRAW,

    UPSIDE_DOWN_SHARP_DOWN_SHORT_DRAW,
    UPSIDE_DOWN_SHARP_DOWN_TALL_DRAW
};

struct CollisionMetadata {
    CollisionType colType;
    CollisionDraw preview;
    std::string prettyName;
};